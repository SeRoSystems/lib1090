package de.serosystems.lib1090.msgs.bds;

import de.serosystems.lib1090.exceptions.BadFormatException;

import java.io.Serializable;
import java.util.Arrays;

/*
 *  This file is part of de.serosystems.lib1090.
 *
 *  de.serosystems.lib1090 is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  de.serosystems.lib1090 is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with de.serosystems.lib1090.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Decoder for ACAS active resolution advisory report (BDS 3,0)
 * See Annex 10 V4 4.3.8.4.2.2
 */
@SuppressWarnings("unused")
public class ACASActiveResolutionAdvisoryReport extends BDSRegister implements Serializable {

    // Fields
    // ------

    // BDS Number
    private short bdsCode;
    // Active Resolution Advisories
    private boolean[] activeResolutionAdvisories;
    // Resolution Advisories Components Record
    private boolean[] resolutionAdvisoriesComponentsRecord;
    // Resolution Advisories Terminated Indicator
    private boolean resolutionAdvisoriesTerminatedIndicator;
    // Multiple Threat Encounter
    private boolean multipleThreatEncounter;
    // Threat Type Indicator
    private short threatTypeIndicator;
    // Threat Identity Data
    private ThreatIdentityData threatIdentityData;

    // Constructors
    // ------------

    /** protected no-arg constructor e.g. for serialization with Kryo **/
    protected ACASActiveResolutionAdvisoryReport() {}

    /**
     * @param message the 7-byte comm-b message (BDS register) as byte array
     */
    public ACASActiveResolutionAdvisoryReport(byte[] message) throws BadFormatException {

        super(message);
        setBds(BDSRegister.bdsCode.ACAS_ACTIVE_RESOLUTION_ADVISORY);

        this.bdsCode = extractBdsCode(message);
        this.activeResolutionAdvisories = extractActiveResolutionAdvisories(message);
        this.resolutionAdvisoriesComponentsRecord = extractResolutionAdvisoriesComponentsRecord(message);
        this.resolutionAdvisoriesTerminatedIndicator = extractResolutionAdvisoryTerminated(message);
        this.multipleThreatEncounter = extractMultipleThreatEncounter(message);
        this.threatTypeIndicator = extractThreatTypeIndicator(message);
        this.threatIdentityData = extractThreatIdentityData(this.threatTypeIndicator, message);

    }

    // Getters
    // -------

    /**
     * @return the currently active resolution advisories (if any) generated by own ACAS unit against one or more threat
     * aircraft.
     */
    public boolean[] getActiveResolutionAdvisories() {
        return computeActiveResolutionAdvisories(activeResolutionAdvisories, multipleThreatEncounter);
    }

    /**
     * @return the currently active resolution advisory complements (if any) received from other ACAS aircraft equipped
     * with on-board resolution capability.
     */
    public boolean[] getResolutionAdvisoriesComponentsRecord() {
        return resolutionAdvisoriesComponentsRecord;
    }

    /**
     * @return whether a resolution advisory previously generated by ACAS has ceased being generated.
     */
    public boolean isResolutionAdvisoriesTerminatedIndicator() {
        return resolutionAdvisoriesTerminatedIndicator;
    }

    /**
     * @return whether two or more simultaneous threats are currently being processed by the ACAS threat resolution
     * logic.
     */
    public boolean isMultipleThreatEncounter() {
        return multipleThreatEncounter;
    }

    /**
     * @return the type of identity data contained in the TID subfield
     * <ul>
     *     <li> 0 signifies No identity data in TID </li>
     *     <li> 1 signifies TID contains a Mode S transponder address </li>
     *     <li> 2 signifies TID contains altitude, range, and bearing data </li>
     *     <li> 3 signifies Not assigned (i.e. invalid value) </li>
     * </ul>
     */
    public short getThreatTypeIndicator() {
        return threatTypeIndicator;
    }

    /**
     * @return the ICAO 24-bit aircraft address of the threat or the altitude, range, and bearing if the threat is not
     * Mode S equipped
     */
    public ThreatIdentityData getThreatIdentityData() {
        return threatIdentityData;
    }

    // static methods
    // ----------------------

    static boolean[] extractActiveResolutionAdvisories(byte[] message) {

        return new boolean[]{
                ((message[1] >>> 7) & 0x01) == 1,
                ((message[1] >>> 6) & 0x01) == 1,
                ((message[1] >>> 5) & 0x01) == 1,
                ((message[1] >>> 4) & 0x01) == 1,
                ((message[1] >>> 3) & 0x01) == 1,
                ((message[1] >>> 2) & 0x01) == 1,
                ((message[1] >>> 1) & 0x01) == 1,
                (message[1] & 0x01) == 1,
                ((message[2] >>> 7) & 0x01) == 1,
                ((message[2] >>> 6) & 0x01) == 1,
                ((message[2] >>> 5) & 0x01) == 1,
                ((message[2] >>> 4) & 0x01) == 1,
                ((message[2] >>> 3) & 0x01) == 1,
                ((message[2] >>> 2) & 0x01) == 1
        };
    }

    static boolean[] extractResolutionAdvisoriesComponentsRecord(byte[] message) {

        boolean doNotPassBelow = ((message[2] >>> 1) & 0x01) == 1;
        boolean doNotPassAbove = (message[2] & 0x01) == 1;
        boolean doNotTurnLef = ((message[3] >>> 7) & 0x01) == 1;
        boolean doNotTurnRight = ((message[3] >>> 6) & 0x01) == 1;

        return new boolean[]{doNotPassBelow, doNotPassAbove, doNotTurnLef, doNotTurnRight};

    }

    static boolean extractResolutionAdvisoryTerminated(byte[] message) {
        return ((message[3] >>> 5) & 0x01) == 1;
    }

    static boolean extractMultipleThreatEncounter(byte[] message) {
        return ((message[3] >>> 4) & 0x01) == 1;
    }

    static short extractThreatTypeIndicator(byte[] message) {
        return (short) ((message[3] >>> 2) & 0x03);
    }

    static ThreatIdentityData extractThreatIdentityData(short threatTypeIndicator, byte[] message) throws BadFormatException {

        ThreatIdentityData threatIdentityData = null;

        switch (threatTypeIndicator) {

            case 1 :
                long icao = (((message[3] & 0x03) << 22) | ((message[4] & 0xFF) << 14) | ((message[5] & 0xFF) << 6) | ((message[6] >>> 2) & 0x3F)) & 0xFFFFFF;
                threatIdentityData = new ThreatIdentityData(icao);
                break;

            case 2 :
                short altitudeCode = (short) ((((message[3] & 0x03) << 11) | ((message[4] & 0xFF) << 3) | ((message[5] >>> 5) & 0x07)) & 0x1FFF);
                short threatIdentityDataRange = (short) ((((message[5] & 0x1F) << 2) | ((message[6] >>> 6) & 0x03)) & 0x7F);
                short threatIdentityDataBearing = (short) (message[6] & 0x3F);
                threatIdentityData = new ThreatIdentityData(altitudeCode, threatIdentityDataRange, threatIdentityDataBearing);
                break;

        }

        return threatIdentityData;

    }

    static boolean[] computeActiveResolutionAdvisories(boolean[] ara, boolean mte) {
        return (ara[0] || mte) ? Arrays.copyOfRange(ara, 1, 7) : null;
    }

    // Override
    // --------

    @Override
    public String toString() {
        return "ACASActiveResolutionAdvisoryReport{" +
                "bdsCode=" + bdsCode +
                ", activeResolutionAdvisories=" + Arrays.toString(activeResolutionAdvisories) +
                ", resolutionAdvisoriesComponentsRecord=" + Arrays.toString(resolutionAdvisoriesComponentsRecord) +
                ", resolutionAdvisoriesTerminatedIndicator=" + resolutionAdvisoriesTerminatedIndicator +
                ", multipleThreatEncounter=" + multipleThreatEncounter +
                ", threatTypeIndicator=" + threatTypeIndicator +
                ", threatIdentityData=" + threatIdentityData +
                '}';
    }
}
